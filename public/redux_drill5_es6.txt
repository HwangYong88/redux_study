es6 전반 공부

1. 예전의 class 문법------------------------------------------------------------------------------------------------------------

ex)op.gg를 만들고 싶다면 롤 캐릭터들의 정보를 정리해놓아야한다
-> var 베인 = {q:'consume' , w:'snowball'}
-> var nunu = {q:'strike', w:'courage'}

이같은 반복되는 작업(비슷한 오브젝트를 많이 만듦)을 쉽게 할때 class문법을 사용하면 편하다.
ex)function objectMaker(){
    this.q = 'consume', // 해석 > 새로생성되는 오브젝트의 q에는 컨슘을 만들어주라
    this.w = 'snowball'
}
기계로부터 생성되는 오브젝트 -> 인스턴스

ex) 생성하기
var nunu = new objectMaker();
var 베인 = new objectMaker();

맞게 설정하기
ex)function objectMaker(skill_q, skill_w){
    this.q = skill_q,
    this.w = skill_w
}
이렇게 하면 둘다 쓸 수 있음


2. ES6의 class 문법------------------------------------------------------------------------------------------------------------

class Hero {
    constructor(){
        this.q = skill_q,
        this.w = skill_w
    }
}

new Hero();

3. Prototype 문법------------------------------------------------------------------------------------------------------------

안만들었는데 Hero.Prototype하면 뭔가 나옴
프로토타입은 유전자 역할
프로토타입(부모) 해놓으면 자식들(hero 함수로 생성되는애들)은 모두 자동으로 설정한 프로토타입을 가지고 태어남

ex) Hero.Prototype.name = 'yong' 해놓으면
var nunu = new Hero();
>> nunu.name = 'yong'   ※주의 여기서는 name나옴
>> nunu = Hero{q:'strike', w:'snowball'} ※주의 여기서는 name안나옴

※ 왜 결과가 다른가? -> 자바스크립트 실행 원리가 자식에 그값이 없으면 부모에 있는지 검색하므로.

※ 비슷한 종류
array에 array.sort(), array.length() 등을 쓸쑤 있는 이유 > new array, new object가 원형이기 때문에 부모의 유전자에 기록이 되어있다.

※ 심화버전 : 모든 array 자료에서 쓸 수 있는 함수를 추가해보자
array.Prototype.함수 =  function(){} // 어레이들의 유전자 조작
var array_test = [1,2];
array_test.함수() // 하면 쓸 수 있음


4. 자바 스크립트 동작원리 ------------------------------------------------------------------------------------------------------------
1) stack이라는 공간에 코드가 쓰인다
2) heap이라는 공간에 변수가 있어서 stack의 변수를 heap에서 찾는다
3) setTimeout, ajax요청, 이벤트리스너 등 은 바로 실행하지않고 대기실에 넣어둠
4) 실행할 시간이 되면 대기실에서 queue "차례차례"넣음
5) queue에서 "스택이 비었을때만" stack으로 올려보냄
6) stack에서 한개한개 실행

코드순서
console.log('1');
setTimeout{console.log(2),1000}
console.log('3');

결과
1>3>2

: 자바스크립트에서 10초걸리는 연산은 하면안됨. 프리징됨. 때문에 스택을 바쁘게하면안됨. quere도 바쁘게 하면안됨

동기적: 한번에 한줄 실행
비동기적: setTimeout, 이벤트리스너, ajax요청






